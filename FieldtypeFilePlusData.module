<?php
/**
 * ProcessWire Fieldtype based on FieldtypeFile
 *
 * Adds another text field to store json encoded data. Has been tested with ProcessWire 2.3 (dev)
 * My mods are marked with ///
 * Steve Beuret 2013-11-08
 *
 *
 *
 * Field that stores one or more files with optional description. 
 *
 * For documentation about the fields used in this class, please see:  
 * /wire/core/Fieldtype.php
 * /wire/core/FieldtypeMulti.php
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2013 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */


class FieldtypeFilePlusData extends FieldtypeFile {	///

	protected $defaultInputfieldClass = '';

	public static function getModuleInfo() {
		return array(
			'title' => __('FilesPlusData', __FILE__),
			'version' => 100,
			'summary' => __('Field that stores one or more files, with additional JSON data', __FILE__),
			'permanent' => false, ///
			);
	}


	public function __construct() {
		$this->defaultInputfieldClass = str_replace('Fieldtype', 'Inputfield', 'FieldtypeFile');	///
	}





	/**
	 * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
 	 *
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array $value
	 * @return string|int|array|object $value
	 *
	 */
	public function ___wakeupValue(Page $page, Field $field, $value) {

		if($value instanceof Pagefiles) return $value; 
		$pagefiles = $this->getBlankValue($page, $field); 
		if(empty($value)) return $pagefiles; 
	
		if(!is_array($value) || array_key_exists('data', $value)) $value = array($value); 
		foreach($value as $v) {
			if(empty($v['data'])) continue; 
			$pagefile = $this->getBlankPagefile($pagefiles, $v['data']); 
			$pagefile->description = $v['description']; 
			$pagefile->plus = json_decode($v['plus']); /// 
			if(isset($v['modified'])) $pagefile->modified = $v['modified'];
			if(isset($v['created'])) $pagefile->created = $v['created'];
			if(isset($v['tags'])) $pagefile->tags = $v['tags'];
			$pagefile->setTrackChanges(true); 
			$pagefiles->add($pagefile); 
		}
	
		$pagefiles->resetTrackChanges(true); 
		return $pagefiles;  
	}

	/**
	 * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB. 
	 *              
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array|object $value
	 * @return string|int
	 *
	 */
	public function ___sleepValue(Page $page, Field $field, $value) {

		$sleepValue = array();
		if(!$value instanceof Pagefiles) return $sleepValue; 
	
		foreach($value as $pagefile) {
			$item = array(
				'data' => $pagefile->basename, 
				'description' => $pagefile->description, 
				'plus' => json_encode($pagefile->plus), ///
				); 
	
			if($field->fileSchema & self::fileSchemaDate) { 
				$item['modified'] = date('Y-m-d H:i:s', $pagefile->modified);
				$item['created'] = date('Y-m-d H:i:s', $pagefile->created);
			}
	
			if($field->fileSchema & self::fileSchemaTags) {
				$item['tags'] = $pagefile->tags;
			}
	
			$sleepValue[] = $item;
		}
		return $sleepValue;
	}



	public function getDatabaseSchema(Field $field) {

		$database = $this->wire('database');
		$schema = parent::getDatabaseSchema($field);
		$table = $database->escapeTable($field->table); 

		$schema['data'] = 'varchar(255) NOT NULL';
		$schema['description'] = "text NOT NULL";
		$schema['plus'] = "text NOT NULL"; ///
		$schema['modified'] = "datetime"; 
		$schema['created'] = "datetime"; 
		$schema['keys']['description'] = 'FULLTEXT KEY description (description)'; 
		$schema['keys']['modified'] = 'index (modified)'; 
		$schema['keys']['created'] = 'index (created)'; 

		if($field->id && !($field->fileSchema & self::fileSchemaDate)) {
			// permanently add new 'modified' and 'created' column to file schema
			$addDates = false;

			try {
				$query = $database->prepare("SHOW COLUMNS FROM `$table` WHERE Field='modified'"); 
				$query->execute();
				$numRows = (int) $query->rowCount();
				
				if($numRows) {
					$field->fileSchema = $field->fileSchema | self::fileSchemaDate; 
					$field->save();
				} else {
					$addDates = true; 
				}
			} catch(Exception $e) {
				// intentionally blank
			}

			if($addDates) try {
				$database->exec("ALTER TABLE `{$table}` ADD `modified` $schema[modified]");
				$database->exec("ALTER TABLE `{$table}` ADD `created` $schema[created]");
				$database->exec("ALTER TABLE `{$table}` ADD " . $schema['keys']['modified']); 
				$database->exec("ALTER TABLE `{$table}` ADD " . $schema['keys']['created']); 
				$field->fileSchema = $field->fileSchema | self::fileSchemaDate; 
				$field->save();
				$date = date('Y-m-d H:i:s'); 
				$query = $database->prepare("UPDATE `$table` SET created=:created, modified=:modified"); 
				$query->bindValue(":created", $date);
				$query->bindValue(":modified", $date); 
				$query->execute();
				$this->message("Added created/modified to DB schema for '{$field->name}'", Notice::log); 
				
			} catch(Exception $e) {
				
				$query = $database->prepare("SHOW COLUMNS FROM `$table` WHERE Field='modified'"); 
				$query->execute();
				$numRows = (int) $query->rowCount();
				
				if($numRows) {
					$field->fileSchema = $field->fileSchema | self::fileSchemaDate; 
					$field->save();
				} else {
					$this->error("Error adding created/modified to '{$field->name}' schema", Notice::log); 
				}
			
			}
		}

		$tagsAction = null; // null=no change; 1=add tags, 0=remove tags
		$schemaTags = 'varchar(255) NOT NULL'; 
		$schemaTagsIndex = 'FULLTEXT KEY tags (tags)'; 

		if($field->useTags && !($field->fileSchema & self::fileSchemaTags)) $tagsAction = 'add';
			else if(!$field->useTags && ($field->fileSchema & self::fileSchemaTags)) $tagsAction = 'remove';

		if($tagsAction === 'add') {
			// add tags field
			try {
				$database->exec("ALTER TABLE `{$table}` ADD tags $schemaTags");
				$database->exec("ALTER TABLE `{$table}` ADD $schemaTagsIndex"); 
				$field->fileSchema = $field->fileSchema | self::fileSchemaTags; 
				$field->save();
				$this->message("Added tags to DB schema for '{$field->name}'", Notice::log); 
			} catch(Exception $e) {
				$this->error("Error adding tags to '{$field->name}' schema", Notice::log); 
			}

		} else if($tagsAction === 'remove') {
			// remove tags field
			try {
				$database->exec("ALTER TABLE `{$table}` DROP INDEX tags"); 
				$database->exec("ALTER TABLE `{$table}` DROP tags"); 
				$field->fileSchema = $field->fileSchema & ~self::fileSchemaTags;
				$field->save();
				$this->message("Dropped tags from DB schema for '{$field->name}'", Notice::log); 
			} catch(Exception $e) {
				$this->error("Error dropping tags from '{$field->name}' schema", Notice::log); 
			}
		}

		if($field->fileSchema & self::fileSchemaTags) { 
			$schema['tags'] = $schemaTags;
			$schema['keys']['tags'] = $schemaTagsIndex;
		}

		return $schema;
	}


	/**
	 * Default list of file extensions supported by this field, and used as the default by getConfigInputfields() method. 
	 *
	 * Subclasses can override with their own string of file extensions
	 *
	 */
	protected function getDefaultFileExtensions() {
		return "pdf doc docx xls xlsx gif jpg jpeg png";
	}


	public function ___getConfigInputfields(Field $field) {

		$inputfields = parent::___getConfigInputfields($field);

		$f = $this->modules->get('InputfieldTextarea');
		$f->attr('name', 'extensions'); 
		$f->attr('value', $field->extensions ? $field->extensions : $this->getDefaultFileExtensions()); 
		$f->attr('rows', 3); 
		$f->label = $this->_('Valid File Extensions');
		$f->description = $this->_('Enter all file extensions allowed by this upload field. Separate each extension by a space. No periods or commas. This field is not case sensitive.'); // Valid file extensions description
		$inputfields->append($f);

		$f = $this->modules->get('InputfieldInteger');
		$f->attr('name', 'maxFiles'); 
		$f->attr('value', (int) $field->maxFiles); 
		$f->attr('size', 4); 
		$f->label = $this->_('Maximum files allowed');
		$f->description = $this->_('Enter 0 for no limit. If you enter 1, the API will dereference this field as a single file rather than an array (when the Page has output formatting on, as it does by default).'); // Max files description
		$inputfields->append($f); 

		$f = $this->modules->get("InputfieldCheckbox"); 
		$f->attr('name', 'entityEncode'); 
		$f->attr('value', 1); 
		if($field->entityEncode) $f->attr('checked', 'checked'); 
		$f->label = $this->_('Entity encode file description/tags? (recommended)'); 
		$f->description = $this->_('If checked, the file description fields will be entity encoded (when the Page has output formatting on, as it does by default).'); // Entity encode description
		$inputfields->append($f); 

		$f = $this->modules->get("InputfieldCheckbox"); 
		$f->attr('name', 'useTags'); 
		$f->attr('value', 1); 
		if($field->useTags) $f->attr('checked', 'checked'); 
			else $f->collapsed = Inputfield::collapsedYes; 
		$f->label = $this->_('Use Tags?'); 
		$f->description = $this->_('If checked, the field will also contain an option for tags in addition to the description.'); // Use tags description
		
		$inputfields->append($f); 

		$f = $this->modules->get('InputfieldSelect');
		$f->attr('name', 'inputfieldClass');
		$f->label = $this->_('Inputfield Type');
		$f->description = $this->_('The type of field that will be used to collect input.');
		$f->required = true;
		$baseClass = $this->defaultInputfieldClass;
		
		foreach($this->fuel('modules')->find("className^=Inputfield") as $fm) {
			if("$fm" == $baseClass || is_subclass_of("$fm", $baseClass))
				$f->addOption("$fm", str_replace("Inputfield", '', "$fm"));
		}
		
		$f->attr('value', $field->inputfieldClass ? $field->inputfieldClass : $this->defaultInputfieldClass);
		$f->collapsed = $field->inputfieldClass && $field->inputfieldClass != $this->defaultInputfieldClass ? Inputfield::collapsedNo : Inputfield::collapsedYes; 
		
		$inputfields->append($f);
		
		return $inputfields;
	}



}

